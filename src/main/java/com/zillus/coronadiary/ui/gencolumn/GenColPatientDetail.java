/*******************************************************************************
 * Copyright 2021 Frank Zillus
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 ******************************************************************************/
package com.zillus.coronadiary.ui.gencolumn;

import com.flowingcode.vaadin.addons.ironicons.IronIcons;
import com.rapidclipse.framework.server.data.renderer.RenderedComponent;
import com.rapidclipse.framework.server.ui.UIUtils;
import com.vaadin.flow.component.ClickEvent;
import com.vaadin.flow.component.ComponentEvent;
import com.vaadin.flow.component.ComponentEventListener;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.button.ButtonVariant;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.zillus.coronadiary.dal.PersonDAO;
import com.zillus.coronadiary.domain.PatientEntity;
import com.zillus.coronadiary.ui.PatientView;
import com.zillus.coronadiary.ui.popup.RemoveDialog;


public class GenColPatientDetail extends HorizontalLayout implements RenderedComponent<PatientEntity>
{

	/** The value. */
	private PatientEntity patient;
	
	/**
	 *
	 */
	public GenColPatientDetail()
	{
		super();
		this.initUI();
	}

	@Override
	public void renderComponent(final PatientEntity value)
	{
		this.patient = value;
		// TODO Auto-generated method stub
		
	}
	
	/**
	 * Show remove dialog.
	 */
	private void showRemoveDialog()
	{
		final RemoveDialog dialog = new RemoveDialog()
			.setText(this.patient.getName())
			.setOkListener(() -> {
				
				final PatientView patientView = UIUtils.getNextParent(this, PatientView.class);
				PersonDAO.removeEntity(this.patient);
				patientView.refresh();
			})
			.setCancelListener(() -> {});
		dialog.open();
	}

	/**
	 * Event handler delegate method for the {@link Button} {@link #btnDelete}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void btnDelete_onClick(final ClickEvent<Button> event)
	{
		this.showRemoveDialog();
	}
	
	/**
	 * Event handler delegate method for the {@link Button} {@link #btnEdit}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void btnEdit_onClick(final ClickEvent<Button> event)
	{
		// TODO
	}
	
	/* WARNING: Do NOT edit!<br>The content of this method is always regenerated by the UI designer. */
	// <generated-code name="initUI">
	private void initUI()
	{
		this.btnEdit   = new Button();
		this.btnDelete = new Button();

		this.setSpacing(false);
		this.btnEdit.addThemeVariants(ButtonVariant.LUMO_SMALL, ButtonVariant.LUMO_TERTIARY);
		this.btnEdit.setIcon(IronIcons.SEARCH.create());
		this.btnDelete.addThemeVariants(ButtonVariant.LUMO_SMALL, ButtonVariant.LUMO_TERTIARY,
			ButtonVariant.LUMO_ERROR);
		this.btnDelete.setIcon(VaadinIcon.TRASH.create());

		this.btnEdit.setSizeUndefined();
		this.btnDelete.setSizeUndefined();
		this.add(this.btnEdit, this.btnDelete);
		this.setSizeUndefined();

		this.btnEdit.addClickListener(this::btnEdit_onClick);
		this.btnDelete.addClickListener(this::btnDelete_onClick);
	} // </generated-code>

	// <generated-code name="variables">
	private Button btnEdit, btnDelete;
	// </generated-code>
	
}
