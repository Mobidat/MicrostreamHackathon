
package com.zillus.coronadiary.ui;

import com.flowingcode.vaadin.addons.ironicons.IronIcons;
import com.vaadin.flow.component.ClickEvent;
import com.vaadin.flow.component.ComponentEvent;
import com.vaadin.flow.component.ComponentEventListener;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.button.ButtonVariant;
import com.vaadin.flow.component.grid.ColumnTextAlign;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.html.H1;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.router.Route;
import com.zillus.coronadiary.HasTitle;
import com.zillus.coronadiary.dal.TreatmentDAO;
import com.zillus.coronadiary.domain.AbstractTreatmentEntity;
import com.zillus.coronadiary.ui.popup.MedicationPopup;
import com.zillus.coronadiary.ui.popup.SymptomPopup;
import com.zillus.coronadiary.ui.popup.TestingPopup;
import com.zillus.coronadiary.ui.popup.VaccinationPopup;


@Route(value = "treatment", layout = MainLayout.class)
public class TreatmentView extends VerticalLayout implements HasTitle
{
	public TreatmentView()
	{
		super();
		this.initUI();
	}
	
	@Override
	public String getTitle()
	{
		return "Diary";
	}
	
	/**
	 * Refresh
	 */
	public void refresh()
	{
		this.grid.setItems(TreatmentDAO.getSortedTreatments());
	}
	
	/**
	 * Event handler delegate method for the {@link Button} {@link #addSymptomBtn}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void addSymptomBtn_onClick(final ClickEvent<Button> event)
	{
		new SymptomPopup().setSavedCallback(() -> {
			this.refresh();
		}).open();
	}

	/**
	 * Event handler delegate method for the {@link Button} {@link #addTestingBtn}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void addTestingBtn_onClick(final ClickEvent<Button> event)
	{
		new TestingPopup().setSavedCallback(() -> {
			this.refresh();
		}).open();
	}
	
	/**
	 * Event handler delegate method for the {@link Button} {@link #addMedicationBtn}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void addMedicationBtn_onClick(final ClickEvent<Button> event)
	{
		new MedicationPopup().setSavedCallback(() -> {
			this.refresh();
		}).open();
	}
	
	/**
	 * Event handler delegate method for the {@link Button} {@link #addVaccinationBtn}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void addVaccinationBtn_onClick(final ClickEvent<Button> event)
	{
		new VaccinationPopup().setSavedCallback(() -> {
			this.refresh();
		}).open();
	}
	
	/* WARNING: Do NOT edit!<br>The content of this method is always regenerated by the UI designer. */
	// <generated-code name="initUI">
	private void initUI()
	{
		this.h1                = new H1();
		this.horizontalLayout  = new HorizontalLayout();
		this.addSymptomBtn     = new Button();
		this.addTestingBtn     = new Button();
		this.addMedicationBtn  = new Button();
		this.addVaccinationBtn = new Button();
		this.grid              = new Grid<>(AbstractTreatmentEntity.class, false);
		
		this.h1.setText("Patient");
		this.horizontalLayout.setSpacing(false);
		this.addSymptomBtn.setText("Symptom");
		this.addSymptomBtn.addThemeVariants(ButtonVariant.LUMO_SUCCESS);
		this.addSymptomBtn.setIcon(IronIcons.ADD.create());
		this.addTestingBtn.setText("Testing");
		this.addTestingBtn.addThemeVariants(ButtonVariant.LUMO_SUCCESS);
		this.addTestingBtn.setIcon(IronIcons.ADD.create());
		this.addMedicationBtn.setText("Medication");
		this.addMedicationBtn.addThemeVariants(ButtonVariant.LUMO_SUCCESS);
		this.addMedicationBtn.setIcon(IronIcons.ADD.create());
		this.addVaccinationBtn.setText("Vaccination");
		this.addVaccinationBtn.addThemeVariants(ButtonVariant.LUMO_SUCCESS);
		this.addVaccinationBtn.setIcon(IronIcons.ADD.create());
		this.grid.addColumn(AbstractTreatmentEntity::getDate).setKey("date").setHeader("Date").setSortable(true)
			.setAutoWidth(true).setFlexGrow(0).setTextAlign(ColumnTextAlign.CENTER);
		this.grid.addColumn(AbstractTreatmentEntity::getName).setKey("name").setHeader("Name").setSortable(true);
		this.grid.addColumn(AbstractTreatmentEntity::getType).setKey("type").setHeader("Type").setSortable(true);
		this.grid.setSelectionMode(Grid.SelectionMode.SINGLE);
		
		this.addSymptomBtn.setWidthFull();
		this.addSymptomBtn.setHeight(null);
		this.addTestingBtn.setWidthFull();
		this.addTestingBtn.setHeight(null);
		this.addMedicationBtn.setWidthFull();
		this.addMedicationBtn.setHeight(null);
		this.addVaccinationBtn.setWidthFull();
		this.addVaccinationBtn.setHeight(null);
		this.horizontalLayout.add(this.addSymptomBtn, this.addTestingBtn, this.addMedicationBtn,
			this.addVaccinationBtn);
		this.h1.setSizeUndefined();
		this.horizontalLayout.setWidthFull();
		this.horizontalLayout.setHeight(null);
		this.grid.setWidthFull();
		this.grid.setHeight(null);
		this.add(this.h1, this.horizontalLayout, this.grid);
		this.setFlexGrow(1.0, this.grid);
		this.setWidthFull();
		this.setHeight(null);
		
		this.addSymptomBtn.addClickListener(this::addSymptomBtn_onClick);
		this.addTestingBtn.addClickListener(this::addTestingBtn_onClick);
		this.addMedicationBtn.addClickListener(this::addMedicationBtn_onClick);
		this.addVaccinationBtn.addClickListener(this::addVaccinationBtn_onClick);
	} // </generated-code>
	
	// <generated-code name="variables">
	private Button                        addSymptomBtn, addTestingBtn, addMedicationBtn, addVaccinationBtn;
	private H1                            h1;
	private HorizontalLayout              horizontalLayout;
	private Grid<AbstractTreatmentEntity> grid;
	// </generated-code>
	
}
